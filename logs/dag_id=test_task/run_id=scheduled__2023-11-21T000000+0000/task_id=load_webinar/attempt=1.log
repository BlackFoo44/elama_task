[2023-11-22T23:06:20.616+0000] {taskinstance.py:1171} INFO - Dependencies all met for <TaskInstance: test_task.load_webinar scheduled__2023-11-21T00:00:00+00:00 [queued]>
[2023-11-22T23:06:20.628+0000] {taskinstance.py:1171} INFO - Dependencies all met for <TaskInstance: test_task.load_webinar scheduled__2023-11-21T00:00:00+00:00 [queued]>
[2023-11-22T23:06:20.629+0000] {taskinstance.py:1368} INFO - 
--------------------------------------------------------------------------------
[2023-11-22T23:06:20.630+0000] {taskinstance.py:1369} INFO - Starting attempt 1 of 5
[2023-11-22T23:06:20.630+0000] {taskinstance.py:1370} INFO - 
--------------------------------------------------------------------------------
[2023-11-22T23:06:20.648+0000] {taskinstance.py:1389} INFO - Executing <Task(PythonOperator): load_webinar> on 2023-11-21 00:00:00+00:00
[2023-11-22T23:06:20.653+0000] {standard_task_runner.py:52} INFO - Started process 263 to run task
[2023-11-22T23:06:20.655+0000] {standard_task_runner.py:79} INFO - Running: ['***', 'tasks', 'run', 'test_task', 'load_webinar', 'scheduled__2023-11-21T00:00:00+00:00', '--job-id', '217', '--raw', '--subdir', 'DAGS_FOLDER/add_data_dag.py', '--cfg-path', '/tmp/tmp1hnq7_xs', '--error-file', '/tmp/tmp9h674gif']
[2023-11-22T23:06:20.657+0000] {standard_task_runner.py:80} INFO - Job 217: Subtask load_webinar
[2023-11-22T23:06:20.672+0000] {logging_mixin.py:115} WARNING - /home/***/.local/lib/python3.7/site-packages/***/configuration.py:538 DeprecationWarning: The sql_alchemy_conn option in [core] has been moved to the sql_alchemy_conn option in [database] - the old setting has been used, but please update your config.
[2023-11-22T23:06:20.733+0000] {task_command.py:371} INFO - Running <TaskInstance: test_task.load_webinar scheduled__2023-11-21T00:00:00+00:00 [running]> on host 54bfe75eb29c
[2023-11-22T23:06:20.835+0000] {taskinstance.py:1583} INFO - Exporting the following env vars:
AIRFLOW_CTX_DAG_EMAIL=***@example.com
AIRFLOW_CTX_DAG_OWNER=***
AIRFLOW_CTX_DAG_ID=test_task
AIRFLOW_CTX_TASK_ID=load_webinar
AIRFLOW_CTX_EXECUTION_DATE=2023-11-21T00:00:00+00:00
AIRFLOW_CTX_TRY_NUMBER=1
AIRFLOW_CTX_DAG_RUN_ID=scheduled__2023-11-21T00:00:00+00:00
[2023-11-22T23:06:20.842+0000] {log.py:128} INFO - select pg_catalog.version()
[2023-11-22T23:06:20.843+0000] {log.py:128} INFO - [raw sql] {}
[2023-11-22T23:06:20.844+0000] {log.py:128} INFO - select current_schema()
[2023-11-22T23:06:20.844+0000] {log.py:128} INFO - [raw sql] {}
[2023-11-22T23:06:20.845+0000] {log.py:128} INFO - show standard_conforming_strings
[2023-11-22T23:06:20.846+0000] {log.py:128} INFO - [raw sql] {}
[2023-11-22T23:06:20.855+0000] {log.py:128} INFO - select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
[2023-11-22T23:06:20.856+0000] {log.py:128} INFO - [generated in 0.00076s] {'name': 'webinar'}
[2023-11-22T23:06:20.857+0000] {log.py:128} INFO - select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
[2023-11-22T23:06:20.858+0000] {log.py:128} INFO - [cached since 0.003108s ago] {'name': 'webinar'}
[2023-11-22T23:06:20.860+0000] {log.py:128} INFO - SELECT c.relname FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace WHERE n.nspname = %(schema)s AND c.relkind in ('r', 'p')
[2023-11-22T23:06:20.860+0000] {log.py:128} INFO - [generated in 0.00061s] {'schema': 'public'}
[2023-11-22T23:06:20.863+0000] {log.py:128} INFO - 
            SELECT c.oid
            FROM pg_catalog.pg_class c
            LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
            WHERE (pg_catalog.pg_table_is_visible(c.oid))
            AND c.relname = %(table_name)s AND c.relkind in
            ('r', 'v', 'm', 'f', 'p')
        
[2023-11-22T23:06:20.863+0000] {log.py:128} INFO - [generated in 0.00062s] {'table_name': 'webinar'}
[2023-11-22T23:06:20.865+0000] {log.py:128} INFO - 
            SELECT a.attname,
              pg_catalog.format_type(a.atttypid, a.atttypmod),
              (
                SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid)
                FROM pg_catalog.pg_attrdef d
                WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum
                AND a.atthasdef
              ) AS DEFAULT,
              a.attnotnull,
              a.attrelid as table_oid,
              pgd.description as comment,
              a.attgenerated as generated,
                              (SELECT json_build_object(
                    'always', a.attidentity = 'a',
                    'start', s.seqstart,
                    'increment', s.seqincrement,
                    'minvalue', s.seqmin,
                    'maxvalue', s.seqmax,
                    'cache', s.seqcache,
                    'cycle', s.seqcycle)
                FROM pg_catalog.pg_sequence s
                JOIN pg_catalog.pg_class c on s.seqrelid = c."oid"
                WHERE c.relkind = 'S'
                AND a.attidentity != ''
                AND s.seqrelid = pg_catalog.pg_get_serial_sequence(
                    a.attrelid::regclass::text, a.attname
                )::regclass::oid
                ) as identity_options                
            FROM pg_catalog.pg_attribute a
            LEFT JOIN pg_catalog.pg_description pgd ON (
                pgd.objoid = a.attrelid AND pgd.objsubid = a.attnum)
            WHERE a.attrelid = %(table_oid)s
            AND a.attnum > 0 AND NOT a.attisdropped
            ORDER BY a.attnum
        
[2023-11-22T23:06:20.865+0000] {log.py:128} INFO - [generated in 0.00062s] {'table_oid': 17282}
[2023-11-22T23:06:20.868+0000] {log.py:128} INFO - 
            SELECT t.typname as "name",
               pg_catalog.format_type(t.typbasetype, t.typtypmod) as "attype",
               not t.typnotnull as "nullable",
               t.typdefault as "default",
               pg_catalog.pg_type_is_visible(t.oid) as "visible",
               n.nspname as "schema"
            FROM pg_catalog.pg_type t
               LEFT JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace
            WHERE t.typtype = 'd'
        
[2023-11-22T23:06:20.869+0000] {log.py:128} INFO - [generated in 0.00068s] {}
[2023-11-22T23:06:20.871+0000] {log.py:128} INFO - 
            SELECT t.typname as "name",
               -- no enum defaults in 8.4 at least
               -- t.typdefault as "default",
               pg_catalog.pg_type_is_visible(t.oid) as "visible",
               n.nspname as "schema",
               e.enumlabel as "label"
            FROM pg_catalog.pg_type t
                 LEFT JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace
                 LEFT JOIN pg_catalog.pg_enum e ON t.oid = e.enumtypid
            WHERE t.typtype = 'e'
        ORDER BY "schema", "name", e.oid
[2023-11-22T23:06:20.871+0000] {log.py:128} INFO - [generated in 0.00055s] {}
[2023-11-22T23:06:20.874+0000] {log.py:128} INFO - 
                SELECT a.attname
                FROM pg_attribute a JOIN (
                    SELECT unnest(ix.indkey) attnum,
                           generate_subscripts(ix.indkey, 1) ord
                    FROM pg_index ix
                    WHERE ix.indrelid = %(table_oid)s AND ix.indisprimary
                    ) k ON a.attnum=k.attnum
                WHERE a.attrelid = %(table_oid)s
                ORDER BY k.ord
            
[2023-11-22T23:06:20.874+0000] {log.py:128} INFO - [generated in 0.00056s] {'table_oid': 17282}
[2023-11-22T23:06:20.876+0000] {log.py:128} INFO - 
        SELECT conname
           FROM  pg_catalog.pg_constraint r
           WHERE r.conrelid = %(table_oid)s AND r.contype = 'p'
           ORDER BY 1
        
[2023-11-22T23:06:20.876+0000] {log.py:128} INFO - [generated in 0.00053s] {'table_oid': 17282}
[2023-11-22T23:06:20.878+0000] {log.py:128} INFO - 
          SELECT r.conname,
                pg_catalog.pg_get_constraintdef(r.oid, true) as condef,
                n.nspname as conschema
          FROM  pg_catalog.pg_constraint r,
                pg_namespace n,
                pg_class c

          WHERE r.conrelid = %(table)s AND
                r.contype = 'f' AND
                c.oid = confrelid AND
                n.oid = c.relnamespace
          ORDER BY 1
        
[2023-11-22T23:06:20.879+0000] {log.py:128} INFO - [generated in 0.00060s] {'table': 17282}
[2023-11-22T23:06:20.880+0000] {log.py:128} INFO - 
              SELECT
                  i.relname as relname,
                  ix.indisunique, ix.indexprs,
                  a.attname, a.attnum, c.conrelid, ix.indkey::varchar,
                  ix.indoption::varchar, i.reloptions, am.amname,
                  pg_get_expr(ix.indpred, ix.indrelid),
                  ix.indnkeyatts as indnkeyatts
              FROM
                  pg_class t
                        join pg_index ix on t.oid = ix.indrelid
                        join pg_class i on i.oid = ix.indexrelid
                        left outer join
                            pg_attribute a
                            on t.oid = a.attrelid and a.attnum = ANY(ix.indkey)
                        left outer join
                            pg_constraint c
                            on (ix.indrelid = c.conrelid and
                                ix.indexrelid = c.conindid and
                                c.contype in ('p', 'u', 'x'))
                        left outer join
                            pg_am am
                            on i.relam = am.oid
              WHERE
                  t.relkind IN ('r', 'v', 'f', 'm', 'p')
                  and t.oid = %(table_oid)s
                  and ix.indisprimary = 'f'
              ORDER BY
                  t.relname,
                  i.relname
            
[2023-11-22T23:06:20.881+0000] {log.py:128} INFO - [generated in 0.00050s] {'table_oid': 17282}
[2023-11-22T23:06:20.884+0000] {log.py:128} INFO - 
            SELECT
                cons.conname as name,
                cons.conkey as key,
                a.attnum as col_num,
                a.attname as col_name
            FROM
                pg_catalog.pg_constraint cons
                join pg_attribute a
                  on cons.conrelid = a.attrelid AND
                    a.attnum = ANY(cons.conkey)
            WHERE
                cons.conrelid = %(table_oid)s AND
                cons.contype = 'u'
        
[2023-11-22T23:06:20.885+0000] {log.py:128} INFO - [generated in 0.00060s] {'table_oid': 17282}
[2023-11-22T23:06:20.886+0000] {log.py:128} INFO - 
            SELECT
                cons.conname as name,
                pg_get_constraintdef(cons.oid) as src
            FROM
                pg_catalog.pg_constraint cons
            WHERE
                cons.conrelid = %(table_oid)s AND
                cons.contype = 'c'
        
[2023-11-22T23:06:20.887+0000] {log.py:128} INFO - [generated in 0.00050s] {'table_oid': 17282}
[2023-11-22T23:06:20.888+0000] {log.py:128} INFO - 
            SELECT
                pgd.description as table_comment
            FROM
                pg_catalog.pg_description pgd
            WHERE
                pgd.objsubid = 0 AND
                pgd.objoid = %(table_oid)s
        
[2023-11-22T23:06:20.888+0000] {log.py:128} INFO - [generated in 0.00041s] {'table_oid': 17282}
[2023-11-22T23:06:20.889+0000] {log.py:128} INFO - 
DROP TABLE webinar
[2023-11-22T23:06:20.890+0000] {log.py:128} INFO - [no key 0.00044s] {}
[2023-11-22T23:06:20.891+0000] {log.py:128} INFO - ROLLBACK
[2023-11-22T23:06:20.892+0000] {taskinstance.py:1902} ERROR - Task failed with exception
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.7/site-packages/sqlalchemy/engine/base.py", line 1901, in _execute_context
    cursor, statement, parameters, context
  File "/home/airflow/.local/lib/python3.7/site-packages/sqlalchemy/engine/default.py", line 736, in do_execute
    cursor.execute(statement, parameters)
psycopg2.errors.DependentObjectsStillExist: cannot drop table webinar because other objects depend on it
DETAIL:  materialized view test_1 depends on table webinar
HINT:  Use DROP ... CASCADE to drop the dependent objects too.


The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.7/site-packages/airflow/operators/python.py", line 171, in execute
    return_value = self.execute_callable()
  File "/home/airflow/.local/lib/python3.7/site-packages/airflow/operators/python.py", line 189, in execute_callable
    return self.python_callable(*self.op_args, **self.op_kwargs)
  File "/opt/airflow/dags/add_data.py", line 19, in load_csv_to_postgres
    df.to_sql(table_name, con=connection, if_exists='replace', index=False)
  File "/home/airflow/.local/lib/python3.7/site-packages/pandas/core/generic.py", line 2882, in to_sql
    method=method,
  File "/home/airflow/.local/lib/python3.7/site-packages/pandas/io/sql.py", line 728, in to_sql
    **engine_kwargs,
  File "/home/airflow/.local/lib/python3.7/site-packages/pandas/io/sql.py", line 1758, in to_sql
    dtype=dtype,
  File "/home/airflow/.local/lib/python3.7/site-packages/pandas/io/sql.py", line 1650, in prep_table
    table.create()
  File "/home/airflow/.local/lib/python3.7/site-packages/pandas/io/sql.py", line 860, in create
    self.pd_sql.drop_table(self.name, self.schema)
  File "/home/airflow/.local/lib/python3.7/site-packages/pandas/io/sql.py", line 1810, in drop_table
    self.get_table(table_name, schema).drop()
  File "/home/airflow/.local/lib/python3.7/site-packages/sqlalchemy/sql/schema.py", line 977, in drop
    bind._run_ddl_visitor(ddl.SchemaDropper, self, checkfirst=checkfirst)
  File "/home/airflow/.local/lib/python3.7/site-packages/sqlalchemy/engine/base.py", line 2211, in _run_ddl_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
  File "/home/airflow/.local/lib/python3.7/site-packages/sqlalchemy/sql/visitors.py", line 524, in traverse_single
    return meth(obj, **kw)
  File "/home/airflow/.local/lib/python3.7/site-packages/sqlalchemy/sql/ddl.py", line 1102, in visit_table
    self.connection.execute(DropTable(table))
  File "/home/airflow/.local/lib/python3.7/site-packages/sqlalchemy/engine/base.py", line 1380, in execute
    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)
  File "/home/airflow/.local/lib/python3.7/site-packages/sqlalchemy/sql/ddl.py", line 81, in _execute_on_connection
    self, multiparams, params, execution_options
  File "/home/airflow/.local/lib/python3.7/site-packages/sqlalchemy/engine/base.py", line 1478, in _execute_ddl
    compiled,
  File "/home/airflow/.local/lib/python3.7/site-packages/sqlalchemy/engine/base.py", line 1944, in _execute_context
    e, statement, parameters, cursor, context
  File "/home/airflow/.local/lib/python3.7/site-packages/sqlalchemy/engine/base.py", line 2125, in _handle_dbapi_exception
    sqlalchemy_exception, with_traceback=exc_info[2], from_=e
  File "/home/airflow/.local/lib/python3.7/site-packages/sqlalchemy/util/compat.py", line 208, in raise_
    raise exception
  File "/home/airflow/.local/lib/python3.7/site-packages/sqlalchemy/engine/base.py", line 1901, in _execute_context
    cursor, statement, parameters, context
  File "/home/airflow/.local/lib/python3.7/site-packages/sqlalchemy/engine/default.py", line 736, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.InternalError: (psycopg2.errors.DependentObjectsStillExist) cannot drop table webinar because other objects depend on it
DETAIL:  materialized view test_1 depends on table webinar
HINT:  Use DROP ... CASCADE to drop the dependent objects too.

[SQL: 
DROP TABLE webinar]
(Background on this error at: https://sqlalche.me/e/14/2j85)
[2023-11-22T23:06:20.911+0000] {taskinstance.py:1412} INFO - Marking task as UP_FOR_RETRY. dag_id=test_task, task_id=load_webinar, execution_date=20231121T000000, start_date=20231122T230620, end_date=20231122T230620
[2023-11-22T23:06:20.927+0000] {standard_task_runner.py:97} ERROR - Failed to execute job 217 for task load_webinar ((psycopg2.errors.DependentObjectsStillExist) cannot drop table webinar because other objects depend on it
DETAIL:  materialized view test_1 depends on table webinar
HINT:  Use DROP ... CASCADE to drop the dependent objects too.

[SQL: 
DROP TABLE webinar]
(Background on this error at: https://sqlalche.me/e/14/2j85); 263)
[2023-11-22T23:06:20.949+0000] {local_task_job.py:156} INFO - Task exited with return code 1
[2023-11-22T23:06:20.987+0000] {local_task_job.py:279} INFO - 0 downstream tasks scheduled from follow-on schedule check
